library(ggplot2)
rm(list=ls())
work.path = "D:/statistic method/Defect CNN/"

pattern_func = function(type){
alpha = 100
yy = rep(1:53,time = 53)
xx = rep(1:53,each = 53)
Xw = 27
Yw = 27
f.size = data.frame(cbind(xx,yy))
f.size$radius = sqrt((f.size$xx-rep(Xw,53*53))^2+(f.size$yy-rep(Yw,53*53))^2)
f.size$gdie = 1*(f.size$radius <= 26)
f.size$theta = atan2(f.size$yy-27, f.size$xx-27)
f.size$theta[f.size$theta<0] = f.size$theta[f.size$theta<0]+2*pi
if(type == 0){
Xc = runif(1,22,32)
Yc = runif(1,22,32)
r0 = runif(1,3,10)
n = rnorm(1,1,1)
rr = max(3,r0/(1+exp(-n))) 
f.size$circle = f.size$gdie
f.size$circle[sqrt((Xc-f.size$xx)^2+(Yc-f.size$yy)^2) <=rr] = 2
f.size$circle[sample(which(f.size$gdie == 1),abs(floor(rnorm(1,alpha, 50))))] = 2
f.size$circle = f.size$circle*f.size$gdie
f.size$circle[f.size$circle==1]=0
f.size$circle = f.size$circle/2
}
if(type == 1){
  p = runif(1,0,1)
  q = runif(1,0,1)
  Xc = runif(1,-51,0)*(p<0.5)+runif(1,54,106)*(p>=0.5)
  Yc = runif(1,-51,0)*(q<0.5)+runif(1,54,106)*(q>=0.5)

  theta = atan2((Yw - Yc),(Xw - Xc))
  theta[theta<0] = theta[theta <0]+2*pi
  theta1 = runif(1,theta-0.3,theta-0.25)
  theta2 = runif(1,theta+0.3,theta+0.35) 
  s = runif(1,0,1)
  d = sqrt((Xw-Xc)^2+(Yw-Yc)^2)
  r = runif(1,d+11,d+24)*(s>0.5)+runif(1,d-24,d-11)*(s<=0.5)
  f.size$scratch.r = sqrt((Xc-f.size$xx)^2+(Yc-f.size$yy)^2)
  f.size$scratch.th = atan2(f.size$yy-Yc, f.size$xx-Xc)
  f.size$scratch.th[f.size$scratch.th<0] = f.size$scratch.th[f.size$scratch.th<0]+2*pi
  f.size$scratch = f.size$gdie
  f.size$scratch[(f.size$scratch.r >= r &
                    f.size$scratch.r <= (r+1) &
                    f.size$scratch.th >= theta1 &
                    f.size$scratch.th <= theta2)] = 2
  #f.size$scratch[sample(which(f.size$gdie == 1),abs(floor(rnorm(1,alpha, 50))))] = 2
  f.size$scratch[sample(which(f.size$gdie == 1),abs(floor(rnorm(1,alpha, 50))))] = 2
  f.size$scratch = f.size$scratch*f.size$gdie
  f.size$scratch[f.size$scratch==1]=0
  f.size$scratch = f.size$scratch/2
}

if(type == 2){
  theta1 = runif(1,0,2*pi)
  theta2 = runif(1,theta1+pi,theta1+2*pi)
  theta2[theta2>2*pi] = theta2[theta2>2*pi]-2*pi
  f.size$Ring = f.size$gdie
  addtheta = round((pi/72),3)
  er = runif(1,0,3)
  if(theta1<theta2){
  nk = floor((theta2-theta1)/addtheta)+1
  }else{nk = floor((2*pi-theta1+theta2)/addtheta)+1}
  for( k in 1:nk ){
  a = theta1 + addtheta*(k-1)
  a[a>2*pi] = a[a>2*pi]-2*pi*floor(a/(2*pi))
  b = theta1 + addtheta*k
  b[b>2*pi] = b[b>2*pi]-2*pi*floor(b/(2*pi))
  if( a < b ){
  f.size$Ring[(f.size$theta > a & f.size$theta <= b & f.size$radius > 26-er)] = 2
  }else{
  f.size$Ring[(f.size$theta > a & f.size$theta <= 2*pi & f.size$radius > 26-er)] = 2
  f.size$Ring[(f.size$theta >= 0 & f.size$theta <= b & f.size$radius > 26-er)] = 2
  }
  er = er + runif(1,-1,1)
  er[er>3] = 3
  er[er<0] = 0
  }
  f.size$Ring[sample(which(f.size$gdie == 1),abs(floor(rnorm(1,alpha, 50))))] = 2
  f.size$Ring = f.size$Ring*f.size$gdie
  f.size$Ring[f.size$Ring==1]=0
  f.size$Ring = f.size$Ring/2
}

if(type == 3){
  theta1 = runif(1,0,2*pi)
  theta2 = runif(1,theta1+pi/5,theta1+pi/2)
  theta2[theta2>2*pi] = theta2[theta2>2*pi]-2*pi
  f.size$Zone = f.size$gdie
  addtheta = round((pi/72),3)
  er = runif(1,3,8)
  if(theta1<theta2){
  nk = floor((theta2-theta1)/addtheta)+1
  }else{nk = floor((2*pi-theta1+theta2)/addtheta)+1}
  for( k in 1:nk ){
  a = theta1 + addtheta*(k-1)
  a[a>2*pi] = a[a>2*pi]-2*pi*floor(a/(2*pi))
  b = theta1 + addtheta*k
  b[b>2*pi] = b[b>2*pi]-2*pi*floor(b/(2*pi))
  if( a < b ){
  f.size$Zone[(f.size$theta > a & f.size$theta <= b & f.size$radius > 26-er)] = 2
  }else{
  f.size$Zone[(f.size$theta > a & f.size$theta <= 2*pi & f.size$radius > 26-er)] = 2
  f.size$Zone[(f.size$theta >= 0 & f.size$theta <= b & f.size$radius > 26-er)] = 2
  }
  er = er + runif(1,-1,1)
  er[er>8] = 8
  er[er<3] = 3
  }
  f.size$Zone[sample(which(f.size$gdie == 1),abs(floor(rnorm(1,alpha, 50))))] = 2
  f.size$Zone= f.size$Zone*f.size$gdie
  f.size$Zone[f.size$Zone==1]=0
  f.size$Zone= f.size$Zone/2
}

f.size$x1 = f.size$xx-0.5
f.size$x2 = f.size$x1+1
f.size$y1 = f.size$yy-0.5
f.size$y2 = f.size$y1+1
return(f.size)
}
#0:circle / 1:scratch  / 2:Ring / 3:Zone

for( i in 1:900){
aa = pattern_func(1)
aa[1,]
max(aa$yy)
max(aa$yy)

work.path = "D:/statistic method/Defect CNN/"
